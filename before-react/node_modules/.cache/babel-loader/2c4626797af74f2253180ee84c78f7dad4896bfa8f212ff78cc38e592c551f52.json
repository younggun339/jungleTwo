{"ast":null,"code":"import { Bodies, World } from \"matter-js\";\nexport const initializeGameObjects = (engine, refs) => {\n  const {\n    canvasSize,\n    mouseRef,\n    bombRef,\n    leftArmLeftRef,\n    rightHand1RightRef,\n    rightHand2RightRef\n  } = refs;\n  const walls = [Bodies.rectangle(canvasSize.x / 2, 0, canvasSize.x, 50, {\n    isStatic: true\n  }), Bodies.rectangle(canvasSize.x / 2, canvasSize.y, canvasSize.x, 50, {\n    isStatic: true\n  }), Bodies.rectangle(0, canvasSize.y / 2, 50, canvasSize.y, {\n    isStatic: true\n  }), Bodies.rectangle(canvasSize.x, canvasSize.y / 2, 50, canvasSize.y, {\n    isStatic: true\n  })];\n  const platforms = [Bodies.rectangle(100, 200, 200, 30, {\n    isStatic: true,\n    render: {\n      sprite: {\n        texture: \"/assets/platform_1.png\",\n        xScale: 2,\n        yScale: 1\n      }\n    }\n  }), Bodies.rectangle(1500, 400, 200, 30, {\n    isStatic: true,\n    render: {\n      sprite: {\n        texture: \"/assets/platform_1.png\",\n        xScale: 2,\n        yScale: 1\n      }\n    }\n  }), Bodies.rectangle(1300, 400, 200, 30, {\n    isStatic: true,\n    render: {\n      sprite: {\n        texture: \"/assets/platform_1.png\",\n        xScale: 2,\n        yScale: 1\n      }\n    }\n  }), Bodies.rectangle(1100, 400, 200, 30, {\n    isStatic: true,\n    render: {\n      sprite: {\n        texture: \"/assets/platform_1.png\",\n        xScale: 2,\n        yScale: 1\n      }\n    }\n  }), Bodies.rectangle(900, 400, 200, 30, {\n    isStatic: true,\n    render: {\n      sprite: {\n        texture: \"/assets/platform_1.png\",\n        xScale: 2,\n        yScale: 1\n      }\n    }\n  })];\n  const goalArrow = Bodies.polygon(1300, 250, 3, 20, {\n    isStatic: true,\n    label: \"goal\",\n    render: {\n      sprite: {\n        texture: \"/assets/goal_arrow.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    },\n    collisionFilter: {\n      mask: 0\n    }\n  });\n  const goal = Bodies.polygon(1300, 350, 3, 20, {\n    isStatic: true,\n    label: \"goal\",\n    render: {\n      sprite: {\n        texture: \"/assets/goal.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    }\n  });\n  bombRef.current = Bodies.circle(1000, 100, 30, {\n    isStatic: true,\n    restitution: 0.5,\n    friction: 0.3,\n    density: 0.05,\n    render: {\n      sprite: {\n        texture: \"/assets/bomb.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    }\n  });\n  mouseRef.current = Bodies.circle(100, 100, 30, {\n    isStatic: true,\n    restitution: 0.5,\n    friction: 0.3,\n    density: 0.05,\n    render: {\n      sprite: {\n        texture: \"/assets/mouse_stand.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    }\n  });\n  const spikes = [];\n  const numberOfSpikes = 36;\n  const spikeWidth = canvasSize.x / numberOfSpikes;\n  for (let i = 0; i < numberOfSpikes; i++) {\n    const spike = Bodies.polygon(spikeWidth / 2 + i * spikeWidth, canvasSize.y - 50, 3, 20, {\n      isStatic: true,\n      render: {\n        sprite: {\n          texture: \"/assets/spike.png\",\n          xScale: 0.65,\n          yScale: 0.65\n        }\n      }\n    });\n    spikes.push(spike);\n  }\n  leftArmLeftRef.current = Bodies.rectangle(canvasSize.x / 4, canvasSize.y / 2, 0, 15, {\n    isStatic: true,\n    angle: 0,\n    collisionFilter: {\n      mask: 0\n    },\n    render: {\n      fillStyle: \"blue\",\n      strokeStyle: \"black\",\n      lineWidth: 1\n    }\n  });\n  rightHand1RightRef.current = Bodies.rectangle(canvasSize.x * 3 / 4, canvasSize.y / 2, 0, 15, {\n    isStatic: true,\n    angle: 0,\n    collisionFilter: {\n      mask: 0\n    },\n    render: {\n      fillStyle: \"blue\",\n      strokeStyle: \"black\",\n      lineWidth: 1\n    }\n  });\n  rightHand2RightRef.current = Bodies.rectangle(canvasSize.x * 3 / 4, canvasSize.y / 2, 0, 15, {\n    isStatic: true,\n    angle: 0,\n    collisionFilter: {\n      mask: 0\n    },\n    render: {\n      fillStyle: \"blue\",\n      strokeStyle: \"black\",\n      lineWidth: 1\n    }\n  });\n  World.add(engine.world, [...walls, ...spikes, ...platforms, mouseRef.current, bombRef.current, leftArmLeftRef.current, rightHand1RightRef.current, rightHand2RightRef.current, goal, goalArrow]);\n};","map":{"version":3,"names":["Bodies","World","initializeGameObjects","engine","refs","canvasSize","mouseRef","bombRef","leftArmLeftRef","rightHand1RightRef","rightHand2RightRef","walls","rectangle","x","isStatic","y","platforms","render","sprite","texture","xScale","yScale","goalArrow","polygon","label","collisionFilter","mask","goal","current","circle","restitution","friction","density","spikes","numberOfSpikes","spikeWidth","i","spike","push","angle","fillStyle","strokeStyle","lineWidth","add","world"],"sources":["/home/ubuntu/NMM/react-frontend/src/utils/initializeGameObjects.js"],"sourcesContent":["import { Bodies, World } from \"matter-js\";\n\nexport const initializeGameObjects = (engine, refs) => {\n  const { canvasSize, mouseRef, bombRef, leftArmLeftRef, rightHand1RightRef, rightHand2RightRef } = refs;\n\n  const walls = [\n    Bodies.rectangle(canvasSize.x / 2, 0, canvasSize.x, 50, { isStatic: true }),\n    Bodies.rectangle(canvasSize.x / 2, canvasSize.y, canvasSize.x, 50, {\n      isStatic: true,\n    }),\n    Bodies.rectangle(0, canvasSize.y / 2, 50, canvasSize.y, { isStatic: true }),\n    Bodies.rectangle(canvasSize.x, canvasSize.y / 2, 50, canvasSize.y, {\n      isStatic: true,\n    }),\n  ];\n\n  const platforms = [\n    Bodies.rectangle(100, 200, 200, 30, {\n      isStatic: true,\n      render: { sprite: { texture: \"/assets/platform_1.png\", xScale: 2, yScale: 1 }}\n    }),\n    Bodies.rectangle(1500, 400, 200, 30, {\n      isStatic: true,\n      render: { sprite: { texture: \"/assets/platform_1.png\", xScale: 2, yScale: 1 }}\n    }),\n    Bodies.rectangle(1300, 400, 200, 30, {\n      isStatic: true,\n      render: { sprite: { texture: \"/assets/platform_1.png\", xScale: 2, yScale: 1 }}\n    }),\n    Bodies.rectangle(1100, 400, 200, 30, {\n      isStatic: true,\n      render: { sprite: { texture: \"/assets/platform_1.png\", xScale: 2, yScale: 1 }}\n    }),\n    Bodies.rectangle(900, 400, 200, 30, {\n      isStatic: true,\n      render: { sprite: { texture: \"/assets/platform_1.png\", xScale: 2, yScale: 1 }}\n    })\n  ];\n\n  const goalArrow = Bodies.polygon(1300, 250, 3, 20, {\n    isStatic: true,\n    label: \"goal\",\n    render: { sprite: { texture: \"/assets/goal_arrow.png\", xScale: 0.65, yScale: 0.65 }},\n    collisionFilter: { mask: 0 }\n  });\n  const goal = Bodies.polygon(1300, 350, 3, 20, {\n    isStatic: true,\n    label: \"goal\",\n    render: { sprite: {\n        texture: \"/assets/goal.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    },\n  });\n\n  bombRef.current = Bodies.circle(1000, 100, 30, {\n    isStatic: true,\n    restitution: 0.5,\n    friction: 0.3,\n    density: 0.05,\n    render: {\n      sprite: {\n        texture: \"/assets/bomb.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    },\n  });\n\n  mouseRef.current = Bodies.circle(100, 100, 30, {\n    isStatic: true,\n    restitution: 0.5,\n    friction: 0.3,\n    density: 0.05,\n    render: {\n      sprite: {\n        texture: \"/assets/mouse_stand.png\",\n        xScale: 0.65,\n        yScale: 0.65\n      }\n    },\n  });\n\n  const spikes = [];\n  const numberOfSpikes = 36;\n  const spikeWidth = canvasSize.x / numberOfSpikes;\n  for (let i = 0; i < numberOfSpikes; i++) {\n    const spike = Bodies.polygon(\n      spikeWidth / 2 + i * spikeWidth,\n      canvasSize.y - 50,\n      3,\n      20,\n      {\n        isStatic: true,\n        render: {\n          sprite: {\n            texture: \"/assets/spike.png\",\n            xScale: 0.65,\n            yScale: 0.65\n          }\n        },\n      }\n    );\n    spikes.push(spike);\n  }\n\n  leftArmLeftRef.current = Bodies.rectangle(\n    canvasSize.x / 4,\n    canvasSize.y / 2,\n    0,\n    15,\n    {\n      isStatic: true,\n      angle: 0,\n      collisionFilter: { mask: 0 },\n      render: {\n        fillStyle: \"blue\",\n        strokeStyle: \"black\",\n        lineWidth: 1,\n      },\n    }\n  );\n  rightHand1RightRef.current = Bodies.rectangle(\n    canvasSize.x * 3 / 4,\n    canvasSize.y / 2,\n    0,\n    15,\n    {\n      isStatic: true,\n      angle: 0,\n      collisionFilter: { mask: 0 },\n      render: {\n        fillStyle: \"blue\",\n        strokeStyle: \"black\",\n        lineWidth: 1,\n      },\n    }\n  );\n  rightHand2RightRef.current = Bodies.rectangle(\n    canvasSize.x * 3 / 4,\n    canvasSize.y / 2,\n    0,\n    15,\n    {\n      isStatic: true,\n      angle: 0,\n      collisionFilter: { mask: 0 },\n      render: {\n        fillStyle: \"blue\",\n        strokeStyle: \"black\",\n        lineWidth: 1,\n      },\n    }\n  );\n\n  World.add(engine.world, [\n    ...walls,\n    ...spikes,\n    ...platforms,\n    mouseRef.current,\n    bombRef.current,\n    leftArmLeftRef.current,\n    rightHand1RightRef.current,\n    rightHand2RightRef.current,\n    goal,\n    goalArrow,\n  ]);\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}