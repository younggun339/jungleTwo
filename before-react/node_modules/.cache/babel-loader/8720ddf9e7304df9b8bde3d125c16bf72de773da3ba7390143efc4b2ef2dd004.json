{"ast":null,"code":"var _s = $RefreshSig$();\n// useWebRTC.ts\nimport { useEffect, useRef, useState } from \"react\";\nimport Peer from \"simple-peer\";\nimport { updateLsideSkeleton } from \"../utils/updateLsideSkeleton\";\nimport { updateRsideSkeleton } from \"../utils/updateRsideSkeleton\";\nconst pcConfig = {\n  iceServers: [{\n    urls: [\"turn:43.203.29.69:3478?transport=tcp\"],\n    username: \"team2\",\n    credential: \"team2\"\n  }]\n};\nconst useWebRTC = (nestjsSocketRef, roomName, leftArmLeftRef, rightHand1RightRef, rightHand2RightRef, canvasSize, startGame) => {\n  _s();\n  const userVideo = useRef(null);\n  const peersRef = useRef([]);\n  const [peers, setPeers] = useState([]);\n  const indexRef = useRef(0);\n  const sendLeftHandJoint = data => {\n    peersRef.current.forEach(peerObj => {\n      peerObj.peer.send(JSON.stringify({\n        type: 'left-hand-joint',\n        data\n      }));\n    });\n  };\n  const sendRightHandJoint = data => {\n    peersRef.current.forEach(peerObj => {\n      peerObj.peer.send(JSON.stringify({\n        type: 'right-hand-joint',\n        data\n      }));\n    });\n  };\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      if (userVideo.current) {\n        userVideo.current.srcObject = stream;\n      }\n      if (nestjsSocketRef.current && nestjsSocketRef.current.id) {\n        nestjsSocketRef.current.emit(\"join-room\", roomName);\n        nestjsSocketRef.current.on(\"room-full\", () => {\n          alert(\"Room is full!\");\n          window.location.href = \"/\";\n        });\n        nestjsSocketRef.current.on(\"all-users\", users => {\n          console.log(\"All users received: \", users);\n          const peers = [];\n          users.forEach(userID => {\n            const peer = createPeer(userID, nestjsSocketRef.current.id, stream);\n            const peerObj = {\n              peerID: userID,\n              peer\n            };\n            peer.on(\"data\", handleIncomingData);\n            peer.on(\"error\", err => console.error(\"Peer error:\", err));\n            peersRef.current.push(peerObj);\n            peers.push(peerObj);\n          });\n          setPeers(peers);\n          indexRef.current = users.length;\n          console.log(\"Peers updated: \", peers);\n          console.log(\"Peers index: \", indexRef.current);\n        });\n        nestjsSocketRef.current.on(\"user-joined\", payload => {\n          const peer = addPeer(payload.signal, payload.callerID, stream);\n          const peerObj = {\n            peer,\n            peerID: payload.callerID\n          };\n          peer.on(\"data\", handleIncomingData);\n          peer.on(\"error\", err => console.error(\"Peer error:\", err));\n          peersRef.current.push(peerObj);\n          setPeers(users => [...users, peerObj]);\n          console.log(\"User joined: \", payload.callerID);\n        });\n        nestjsSocketRef.current.on(\"receiving-returned-signal\", payload => {\n          const item = peersRef.current.find(p => p.peerID === payload.id);\n          if (item) item.peer.signal(payload.signal);\n        });\n        nestjsSocketRef.current.on(\"user-left\", id => {\n          const peerObj = peersRef.current.find(p => p.peerID === id);\n          if (peerObj) peerObj.peer.destroy();\n          const peers = peersRef.current.filter(p => p.peerID !== id);\n          peersRef.current = peers;\n          setPeers(peers);\n          console.log(\"User left: \", id);\n        });\n        nestjsSocketRef.current.on(\"game-started\", () => {\n          console.log(\"Game started signal received\", {});\n          startGame();\n        });\n      }\n    });\n  }, [roomName]);\n  const createPeer = (userToSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n      config: pcConfig\n    });\n    const dataChannel = peer._pc.createDataChannel(\"yourChannelName\", {\n      ordered: true,\n      maxPacketLifeTime: 3000\n    });\n    dataChannel.onopen = () => {\n      console.log(\"Data Channel is open\");\n    };\n    dataChannel.onclose = () => {\n      console.log(\"Data Channel is closed\");\n    };\n    // 데이터 채널을 피어 객체에 저장하여 사용\n    peer.dataChannel = peer._pc.createDataChannel(\"yourChannelName\", {\n      ordered: true\n    });\n    peer.on('signal', signal => {\n      var _nestjsSocketRef$curr;\n      (_nestjsSocketRef$curr = nestjsSocketRef.current) === null || _nestjsSocketRef$curr === void 0 ? void 0 : _nestjsSocketRef$curr.emit('sending-signal', {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    peer.on(\"signal\", signal => {\n      var _nestjsSocketRef$curr2;\n      (_nestjsSocketRef$curr2 = nestjsSocketRef.current) === null || _nestjsSocketRef$curr2 === void 0 ? void 0 : _nestjsSocketRef$curr2.emit(\"sending-signal\", {\n        userToSignal,\n        callerID,\n        signal\n      });\n    });\n    return peer;\n  };\n  const addPeer = (incomingSignal, callerID, stream) => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n      config: pcConfig,\n      channelConfig: {\n        ordered: false,\n        // UDP-like behavior\n        maxRetransmits: 0\n      }\n    });\n    peer.on(\"signal\", signal => {\n      var _nestjsSocketRef$curr3;\n      (_nestjsSocketRef$curr3 = nestjsSocketRef.current) === null || _nestjsSocketRef$curr3 === void 0 ? void 0 : _nestjsSocketRef$curr3.emit(\"returning-signal\", {\n        signal,\n        callerID\n      });\n    });\n    peer.signal(incomingSignal);\n    return peer;\n  };\n  const handleIncomingData = data => {\n    const parsedData = JSON.parse(data);\n    if (parsedData.type === 'left-hand-joint') {\n      const {\n        joint1Start,\n        joint1End\n      } = parsedData.data;\n      updateLsideSkeleton(leftArmLeftRef, joint1Start, joint1End, canvasSize);\n    } else if (parsedData.type === 'right-hand-joint') {\n      const {\n        joint1,\n        joint2,\n        joint3\n      } = parsedData.data;\n      updateRsideSkeleton(rightHand1RightRef, joint1, joint2, canvasSize);\n      updateRsideSkeleton(rightHand2RightRef, joint2, joint3, canvasSize);\n    }\n  };\n  return {\n    userVideo,\n    peers,\n    indexRef,\n    sendLeftHandJoint,\n    sendRightHandJoint\n  };\n};\n_s(useWebRTC, \"XJHqxDJifgJ07sqlMSKyRdSpvE4=\");\nexport default useWebRTC;","map":{"version":3,"names":["useEffect","useRef","useState","Peer","updateLsideSkeleton","updateRsideSkeleton","pcConfig","iceServers","urls","username","credential","useWebRTC","nestjsSocketRef","roomName","leftArmLeftRef","rightHand1RightRef","rightHand2RightRef","canvasSize","startGame","_s","userVideo","peersRef","peers","setPeers","indexRef","sendLeftHandJoint","data","current","forEach","peerObj","peer","send","JSON","stringify","type","sendRightHandJoint","navigator","mediaDevices","getUserMedia","video","audio","then","stream","srcObject","id","emit","on","alert","window","location","href","users","console","log","userID","createPeer","peerID","handleIncomingData","err","error","push","length","payload","addPeer","signal","callerID","item","find","p","destroy","filter","userToSignal","initiator","trickle","config","dataChannel","_pc","createDataChannel","ordered","maxPacketLifeTime","onopen","onclose","_nestjsSocketRef$curr","_nestjsSocketRef$curr2","incomingSignal","channelConfig","maxRetransmits","_nestjsSocketRef$curr3","parsedData","parse","joint1Start","joint1End","joint1","joint2","joint3"],"sources":["/home/ubuntu/NMM/react-frontend/src/hooks/useWebRTC.ts"],"sourcesContent":["// useWebRTC.ts\nimport { useEffect, useRef, useState, MutableRefObject } from \"react\";\nimport { Body } from \"matter-js\";\nimport { Socket } from \"socket.io-client\";\nimport Peer from \"simple-peer\";\nimport { updateLsideSkeleton } from \"../utils/updateLsideSkeleton\";\nimport { updateRsideSkeleton } from \"../utils/updateRsideSkeleton\";\n\nconst pcConfig = {\n  iceServers: [\n    {\n      urls: [\"turn:43.203.29.69:3478?transport=tcp\"],\n      username: \"team2\",\n      credential: \"team2\",\n    },\n  ],\n};\n\nconst useWebRTC = (\n  nestjsSocketRef: MutableRefObject<Socket | null>,\n  roomName: string,\n  leftArmLeftRef: MutableRefObject<Body | null>,\n  rightHand1RightRef: MutableRefObject<Body | null>,\n  rightHand2RightRef: MutableRefObject<Body | null>,\n  canvasSize: { x: number; y: number },\n  startGame: () => void\n): WebRTCResult => {\n  const userVideo = useRef<HTMLVideoElement | null>(null);\n  const peersRef = useRef<PeerObject[]>([]);\n  const [peers, setPeers] = useState<PeerObject[]>([]);\n  const indexRef = useRef(0);\n\n  const sendLeftHandJoint = (data: any) => {\n    peersRef.current.forEach((peerObj) => {\n      peerObj.peer.send(JSON.stringify({ type: 'left-hand-joint', data }));\n    });\n  };\n\n  const sendRightHandJoint = (data: any) => {\n    peersRef.current.forEach((peerObj) => {\n      peerObj.peer.send(JSON.stringify({ type: 'right-hand-joint', data }));\n    });\n  };\n\n  useEffect(() => {\n    navigator.mediaDevices\n      .getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        if (userVideo.current) {\n          userVideo.current.srcObject = stream;\n        }\n\n        if (nestjsSocketRef.current && nestjsSocketRef.current.id) {\n          nestjsSocketRef.current.emit(\"join-room\", roomName);\n\n          nestjsSocketRef.current.on(\"room-full\", () => {\n            alert(\"Room is full!\");\n            window.location.href = \"/\";\n          });\n\n          nestjsSocketRef.current.on(\"all-users\", (users: string[]) => {\n            console.log(\"All users received: \", users);\n            const peers: PeerObject[] = [];\n            users.forEach((userID) => {\n              const peer = createPeer(userID, nestjsSocketRef.current!.id!, stream);\n              const peerObj: PeerObject = { peerID: userID, peer };\n              peer.on(\"data\", handleIncomingData);\n              peer.on(\"error\", (err) => console.error(\"Peer error:\", err));\n              peersRef.current.push(peerObj);\n              peers.push(peerObj);\n            });\n            setPeers(peers);\n            indexRef.current = users.length;\n            console.log(\"Peers updated: \", peers);\n            console.log(\"Peers index: \", indexRef.current);\n          });\n\n          nestjsSocketRef.current.on(\"user-joined\", (payload: { signal: any; callerID: string }) => {\n            const peer = addPeer(payload.signal, payload.callerID, stream);\n            const peerObj: PeerObject = { peer, peerID: payload.callerID };\n            peer.on(\"data\", handleIncomingData);\n            peer.on(\"error\", (err) => console.error(\"Peer error:\", err));\n            peersRef.current.push(peerObj);\n            setPeers((users) => [...users, peerObj]);\n            console.log(\"User joined: \", payload.callerID);\n          });\n\n          nestjsSocketRef.current.on(\"receiving-returned-signal\", (payload: { id: string; signal: any }) => {\n            const item = peersRef.current.find((p) => p.peerID === payload.id);\n            if (item) item.peer.signal(payload.signal);\n          });\n\n          nestjsSocketRef.current.on(\"user-left\", (id: string) => {\n            const peerObj = peersRef.current.find((p) => p.peerID === id);\n            if (peerObj) peerObj.peer.destroy();\n            const peers = peersRef.current.filter((p) => p.peerID !== id);\n            peersRef.current = peers;\n            setPeers(peers);\n            console.log(\"User left: \", id);\n          });\n\n          nestjsSocketRef.current!.on(\"game-started\", () => {\n            console.log(\"Game started signal received\", {  });\n            startGame();\n          });\n        }\n      });\n  }, [roomName]);\n\n  const createPeer = (userToSignal: string, callerID: string, stream: MediaStream): Peer.Instance => {\n    const peer= new Peer({\n      initiator: true,\n      trickle: false,\n      stream,\n      config: pcConfig,\n    })as any;\n    \n\n    const dataChannel = (peer as any)._pc.createDataChannel(\"yourChannelName\", {\n    ordered: true,\n    maxPacketLifeTime: 3000,\n  });\n    dataChannel.onopen = () => {\n    console.log(\"Data Channel is open\");\n  };\n\n  dataChannel.onclose = () => {\n    console.log(\"Data Channel is closed\");\n  };\n  // 데이터 채널을 피어 객체에 저장하여 사용\npeer.dataChannel = peer._pc.createDataChannel(\"yourChannelName\", {\n  ordered: true\n});\n\n  peer.on('signal', (signal: any) => {\n    nestjsSocketRef.current?.emit('sending-signal', { userToSignal, callerID, signal });\n  });\n\n    peer.on(\"signal\", (signal: any) => {\n      nestjsSocketRef.current?.emit(\"sending-signal\", {\n        userToSignal,\n        callerID,\n        signal,\n      });\n    });\n\n    return peer;\n  };\n\n  const addPeer = (incomingSignal: any, callerID: string, stream: MediaStream): Peer.Instance => {\n    const peer = new Peer({\n      initiator: false,\n      trickle: false,\n      stream,\n      config: pcConfig,\n      channelConfig: {\n        ordered: false, // UDP-like behavior\n        maxRetransmits: 0,\n      },\n    });\n\n    peer.on(\"signal\", (signal) => {\n      nestjsSocketRef.current?.emit(\"returning-signal\", { signal, callerID });\n    });\n\n    peer.signal(incomingSignal);\n    return peer;\n  };\n\n  const handleIncomingData = (data: any) => {\n    const parsedData = JSON.parse(data);\n\n    if (parsedData.type === 'left-hand-joint') {\n      const { joint1Start, joint1End } = parsedData.data;\n      updateLsideSkeleton(leftArmLeftRef, joint1Start, joint1End, canvasSize);\n\n    } else if (parsedData.type === 'right-hand-joint') {\n      const { joint1, joint2, joint3 } = parsedData.data;\n      updateRsideSkeleton(rightHand1RightRef, joint1, joint2, canvasSize);\n      updateRsideSkeleton(rightHand2RightRef, joint2, joint3, canvasSize);\n    }\n  };\n\n  return { userVideo, peers, indexRef, sendLeftHandJoint, sendRightHandJoint };\n};\n\nexport interface PeerObject {\n  peerID: string;\n  peer: Peer.Instance;\n}\n\nexport interface WebRTCResult {\n  userVideo: React.MutableRefObject<HTMLVideoElement | null>;\n  peers: PeerObject[];\n  indexRef: MutableRefObject<number>;\n  sendLeftHandJoint: (data: any) => void;\n  sendRightHandJoint: (data: any) => void;\n}\n\nexport default useWebRTC;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}