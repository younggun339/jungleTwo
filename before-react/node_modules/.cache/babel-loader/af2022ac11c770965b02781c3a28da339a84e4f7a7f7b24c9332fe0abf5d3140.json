{"ast":null,"code":"var _s = $RefreshSig$();\n// useSimulation.ts\nimport { useEffect } from 'react';\nimport { Body } from 'matter-js';\nconst useSimulation = ({\n  isSimStarted,\n  leftArmLeftRef,\n  rightHand1RightRef,\n  rightHand2RightRef,\n  mouseRef,\n  bombRef,\n  nestjsSocketRef,\n  explodeBomb,\n  winGame,\n  loseGame\n}) => {\n  _s();\n  useEffect(() => {\n    if (isSimStarted && leftArmLeftRef.current && rightHand1RightRef.current && rightHand2RightRef.current && leftArmLeftRef.current.vertices.length > 1 && rightHand1RightRef.current.vertices.length > 1 && rightHand2RightRef.current.vertices.length > 1) {\n      const fixedRef1 = {\n        x: leftArmLeftRef.current.position.x,\n        y: leftArmLeftRef.current.position.y,\n        width: Math.abs(leftArmLeftRef.current.vertices[1].x - leftArmLeftRef.current.vertices[0].x),\n        angle: leftArmLeftRef.current.angle\n      };\n      const fixedRef2 = {\n        x: rightHand1RightRef.current.position.x,\n        y: rightHand1RightRef.current.position.y,\n        width: Math.abs(rightHand1RightRef.current.vertices[1].x - rightHand1RightRef.current.vertices[0].x),\n        angle: rightHand1RightRef.current.angle\n      };\n      const fixedRef3 = {\n        x: rightHand2RightRef.current.position.x,\n        y: rightHand2RightRef.current.position.y,\n        width: Math.abs(rightHand2RightRef.current.vertices[1].x - rightHand2RightRef.current.vertices[0].x),\n        angle: rightHand2RightRef.current.angle\n      };\n      fetch(\"/simulation-start\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          fixedRef1,\n          fixedRef2,\n          fixedRef3\n        })\n      }).then(response => response.json()).then(data => {\n        if (data.isBombed) {\n          explodeBomb();\n        }\n        if (data.isGameClear) {\n          winGame();\n        } else {\n          loseGame();\n        }\n      }).catch(error => console.error(\"Error sending simulation start:\", error));\n    }\n  }, [isSimStarted]);\n  useEffect(() => {\n    if (isSimStarted) {\n      var _nestjsSocketRef$curr;\n      const handleMouseJourney = data => {\n        Body.setPosition(mouseRef.current, {\n          x: data.mousePos.x,\n          y: data.mousePos.y\n        });\n        Body.setPosition(bombRef.current, {\n          x: data.bombPos.x,\n          y: data.bombPos.y\n        });\n        Body.setAngle(bombRef.current, data.bombAngle);\n      };\n      (_nestjsSocketRef$curr = nestjsSocketRef.current) === null || _nestjsSocketRef$curr === void 0 ? void 0 : _nestjsSocketRef$curr.on(\"mouse-journey\", handleMouseJourney);\n      return () => {\n        var _nestjsSocketRef$curr2;\n        (_nestjsSocketRef$curr2 = nestjsSocketRef.current) === null || _nestjsSocketRef$curr2 === void 0 ? void 0 : _nestjsSocketRef$curr2.off(\"mouse-journey\", handleMouseJourney);\n      };\n    }\n  }, [isSimStarted]);\n};\n_s(useSimulation, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\nexport default useSimulation;","map":{"version":3,"names":["useEffect","Body","useSimulation","isSimStarted","leftArmLeftRef","rightHand1RightRef","rightHand2RightRef","mouseRef","bombRef","nestjsSocketRef","explodeBomb","winGame","loseGame","_s","current","vertices","length","fixedRef1","x","position","y","width","Math","abs","angle","fixedRef2","fixedRef3","fetch","method","headers","body","JSON","stringify","then","response","json","data","isBombed","isGameClear","catch","error","console","_nestjsSocketRef$curr","handleMouseJourney","setPosition","mousePos","bombPos","setAngle","bombAngle","on","_nestjsSocketRef$curr2","off"],"sources":["/home/ubuntu/NMM/react-frontend/src/hooks/useSimulation.ts"],"sourcesContent":["// useSimulation.ts\nimport { useEffect } from 'react';\nimport { MutableRefObject } from 'react';\nimport { Body } from 'matter-js';\nimport { Socket } from 'socket.io-client';\n\ninterface UseSimulationProps {\n  isSimStarted: boolean;\n  leftArmLeftRef: MutableRefObject<Body | null>;\n  rightHand1RightRef: MutableRefObject<Body | null>;\n  rightHand2RightRef: MutableRefObject<Body | null>;\n  mouseRef: MutableRefObject<Body | null>;\n  bombRef: MutableRefObject<Body | null>;\n  nestjsSocketRef: MutableRefObject<Socket | null>;\n  explodeBomb: () => void;\n  winGame: () => void;\n  loseGame: () => void;\n}\n\nconst useSimulation = ({\n  isSimStarted,\n  leftArmLeftRef,\n  rightHand1RightRef,\n  rightHand2RightRef,\n  mouseRef,\n  bombRef,\n  nestjsSocketRef,\n  explodeBomb,\n  winGame,\n  loseGame,\n}: UseSimulationProps) => {\n  useEffect(() => {\n    if (\n      isSimStarted &&\n      leftArmLeftRef.current &&\n      rightHand1RightRef.current &&\n      rightHand2RightRef.current &&\n      leftArmLeftRef.current.vertices.length > 1 &&\n      rightHand1RightRef.current.vertices.length > 1 &&\n      rightHand2RightRef.current.vertices.length > 1\n    ) {\n      const fixedRef1 = {\n        x: leftArmLeftRef.current.position.x,\n        y: leftArmLeftRef.current.position.y,\n        width: Math.abs(leftArmLeftRef.current.vertices[1].x - leftArmLeftRef.current.vertices[0].x),\n        angle: leftArmLeftRef.current.angle,\n      };\n      const fixedRef2 = {\n        x: rightHand1RightRef.current.position.x,\n        y: rightHand1RightRef.current.position.y,\n        width: Math.abs(rightHand1RightRef.current.vertices[1].x - rightHand1RightRef.current.vertices[0].x),\n        angle: rightHand1RightRef.current.angle,\n      };\n      const fixedRef3 = {\n        x: rightHand2RightRef.current.position.x,\n        y: rightHand2RightRef.current.position.y,\n        width: Math.abs(rightHand2RightRef.current.vertices[1].x - rightHand2RightRef.current.vertices[0].x),\n        angle: rightHand2RightRef.current.angle,\n      };\n\n      fetch(\"/simulation-start\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          fixedRef1,\n          fixedRef2,\n          fixedRef3,\n        }),\n      })\n        .then((response) => response.json())\n        .then((data) => {\n          if (data.isBombed) {\n            explodeBomb();\n          }\n          if (data.isGameClear) {\n            winGame();\n          } else {\n            loseGame();\n          }\n        })\n        .catch((error) => console.error(\"Error sending simulation start:\", error));\n    }\n  }, [isSimStarted]);\n\n  useEffect(() => {\n    if (isSimStarted) {\n      const handleMouseJourney = (data: any) => {\n        Body.setPosition(mouseRef.current!, { x: data.mousePos.x, y: data.mousePos.y });\n        Body.setPosition(bombRef.current!, { x: data.bombPos.x, y: data.bombPos.y });\n        Body.setAngle(bombRef.current!, data.bombAngle);\n      };\n\n      nestjsSocketRef.current?.on(\"mouse-journey\", handleMouseJourney);\n\n      return () => {\n        nestjsSocketRef.current?.off(\"mouse-journey\", handleMouseJourney);\n      };\n    }\n  }, [isSimStarted]);\n};\n\nexport default useSimulation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}