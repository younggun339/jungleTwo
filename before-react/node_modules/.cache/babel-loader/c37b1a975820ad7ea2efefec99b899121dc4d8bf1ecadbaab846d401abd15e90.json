{"ast":null,"code":"// NestWebSocket.js\nimport io from 'socket.io-client';\nclass NestWebSocket {\n  constructor(url) {\n    this.url = url;\n    this.socket = this.connect();\n  }\n  connect() {\n    // WebSocket 서버에 연결합니다.\n    const socket = io(this.url);\n\n    // 연결이 성공적으로 이루어졌을 때 실행할 로직\n    socket.on('connect', () => {\n      console.log('WebSocket connected:', socket.id);\n    });\n\n    // 연결에 실패했을 때 실행할 로직\n    socket.on('connect_error', error => {\n      console.error('Connection Error:', error);\n    });\n\n    // 연결이 종료되었을 때 실행할 로직\n    socket.on('disconnect', reason => {\n      console.log('Disconnected:', reason);\n    });\n    return socket;\n  }\n\n  // 서버로부터 'testResponse' 메시지를 받을 때 처리할 핸들러를 등록합니다.\n  onTestResponse(handler) {\n    this.socket.on('testResponse', handler);\n  }\n\n  // 'test' 이벤트를 서버로 전송합니다.\n  sendTest(data) {\n    this.socket.emit('test', data);\n    console.log('Sent test event with data:', data);\n  }\n\n  // WebSocket 연결을 종료합니다.\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      console.log('WebSocket disconnected');\n    }\n  }\n}\n\n// WebSocket 서버의 URL\nconst websocketUrl = \"https://43.203.29.69/mouse-journey\";\n\n// NestWebSocket 인스턴스를 생성합니다.\nconst nestWebSocket = new NestWebSocket(websocketUrl);\nexport default nestWebSocket;","map":{"version":3,"names":["io","NestWebSocket","constructor","url","socket","connect","on","console","log","id","error","reason","onTestResponse","handler","sendTest","data","emit","disconnect","websocketUrl","nestWebSocket"],"sources":["/home/ubuntu/NMM/react-frontend/src/components/NestWebSocket.js"],"sourcesContent":["// NestWebSocket.js\nimport io from 'socket.io-client';\n\nclass NestWebSocket {\n  constructor(url) {\n    this.url = url;\n    this.socket = this.connect();\n  }\n\n  connect() {\n    // WebSocket 서버에 연결합니다.\n    const socket = io(this.url);\n\n    // 연결이 성공적으로 이루어졌을 때 실행할 로직\n    socket.on('connect', () => {\n      console.log('WebSocket connected:', socket.id);\n    });\n\n    // 연결에 실패했을 때 실행할 로직\n    socket.on('connect_error', (error) => {\n      console.error('Connection Error:', error);\n    });\n\n    // 연결이 종료되었을 때 실행할 로직\n    socket.on('disconnect', (reason) => {\n      console.log('Disconnected:', reason);\n    });\n\n    return socket;\n  }\n\n  // 서버로부터 'testResponse' 메시지를 받을 때 처리할 핸들러를 등록합니다.\n  onTestResponse(handler) {\n    this.socket.on('testResponse', handler);\n  }\n\n  // 'test' 이벤트를 서버로 전송합니다.\n  sendTest(data) {\n    this.socket.emit('test', data);\n    console.log('Sent test event with data:', data);\n  }\n\n  // WebSocket 연결을 종료합니다.\n  disconnect() {\n    if (this.socket) {\n      this.socket.disconnect();\n      console.log('WebSocket disconnected');\n    }\n  }\n}\n\n// WebSocket 서버의 URL\nconst websocketUrl = \"https://43.203.29.69/mouse-journey\";\n\n// NestWebSocket 인스턴스를 생성합니다.\nconst nestWebSocket = new NestWebSocket(websocketUrl);\n\nexport default nestWebSocket;"],"mappings":"AAAA;AACA,OAAOA,EAAE,MAAM,kBAAkB;AAEjC,MAAMC,aAAa,CAAC;EAClBC,WAAWA,CAACC,GAAG,EAAE;IACf,IAAI,CAACA,GAAG,GAAGA,GAAG;IACd,IAAI,CAACC,MAAM,GAAG,IAAI,CAACC,OAAO,CAAC,CAAC;EAC9B;EAEAA,OAAOA,CAAA,EAAG;IACR;IACA,MAAMD,MAAM,GAAGJ,EAAE,CAAC,IAAI,CAACG,GAAG,CAAC;;IAE3B;IACAC,MAAM,CAACE,EAAE,CAAC,SAAS,EAAE,MAAM;MACzBC,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEJ,MAAM,CAACK,EAAE,CAAC;IAChD,CAAC,CAAC;;IAEF;IACAL,MAAM,CAACE,EAAE,CAAC,eAAe,EAAGI,KAAK,IAAK;MACpCH,OAAO,CAACG,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACAN,MAAM,CAACE,EAAE,CAAC,YAAY,EAAGK,MAAM,IAAK;MAClCJ,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,MAAM,CAAC;IACtC,CAAC,CAAC;IAEF,OAAOP,MAAM;EACf;;EAEA;EACAQ,cAAcA,CAACC,OAAO,EAAE;IACtB,IAAI,CAACT,MAAM,CAACE,EAAE,CAAC,cAAc,EAAEO,OAAO,CAAC;EACzC;;EAEA;EACAC,QAAQA,CAACC,IAAI,EAAE;IACb,IAAI,CAACX,MAAM,CAACY,IAAI,CAAC,MAAM,EAAED,IAAI,CAAC;IAC9BR,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEO,IAAI,CAAC;EACjD;;EAEA;EACAE,UAAUA,CAAA,EAAG;IACX,IAAI,IAAI,CAACb,MAAM,EAAE;MACf,IAAI,CAACA,MAAM,CAACa,UAAU,CAAC,CAAC;MACxBV,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACvC;EACF;AACF;;AAEA;AACA,MAAMU,YAAY,GAAG,oCAAoC;;AAEzD;AACA,MAAMC,aAAa,GAAG,IAAIlB,aAAa,CAACiB,YAAY,CAAC;AAErD,eAAeC,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}